import streamlit as st
import os
import google.generativeai as genai
from dotenv import load_dotenv
import smtplib
from email.mime.text import MIMEText
import re

# Load environment variables
load_dotenv()
api_key = os.getenv("GENAI_API_KEY")
genai.configure(api_key=api_key)

# Initialize the Gemini model
model = genai.GenerativeModel("gemini-2.0-flash")

class EmailGenerator:
    def __init__(self, name):
        self.name = name

    def generate_email(self, recipient_name, event_name, email_type, special_instructions="", use_html=False):
        """Generates a well-structured, professional email with HTML formatting if needed."""
        prompt = f"""
        You are an expert email composer. Create a {email_type.lower()} email for {recipient_name} regarding the event: {event_name}.
        
        IMPORTANT: Return ONLY the exact email content. NO explanations, NO backticks (```), NO markdown formatting, and NO extra text.
        
        The email must include:
        - A proper greeting
        - A well-structured body
        - A professional closing with a signature
        
        Additional requirements:
        - Special Instructions: {special_instructions}
        - Format: {"HTML" if use_html else "Plain text"}
        
        {"If using HTML, create a visually appealing email with proper styling (colors, spacing, fonts, etc.) using inline CSS. Include full HTML structure with <html>, <head>, and <body> tags." if use_html else ""}
        """
        
        response = model.generate_content(prompt)
        email_content = response.text.strip() if response else "Error generating email content."
        
        # Clean up the response
        # Remove any potential "Here's the email:" or similar phrases
        email_content = re.sub(r'^(Here\'s|Here is|I\'ve created|Below is|This is|As requested|Please find)(.*?)email[:\s]*', '', email_content, flags=re.IGNORECASE|re.DOTALL)
        
        # Remove markdown code blocks if they exist
        email_content = re.sub(r'```html\s*', '', email_content)
        email_content = re.sub(r'```\s*', '', email_content)
        
        email_content = email_content.strip()
        
        # If HTML format requested but the response doesn't have HTML tags, wrap it
        if use_html and not email_content.lower().startswith('<html') and not email_content.lower().startswith('<!doctype'):
            email_content = f"""
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>Email</title>
            </head>
            <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333333; max-width: 600px; margin: 0 auto; padding: 20px; background-color: #f9f9f9;">
                <div style="background-color: #ffffff; padding: 30px; border-radius: 10px; box-shadow: 0 3px 10px rgba(0,0,0,0.1);">
                    {email_content}
                </div>
                <div style="text-align: center; margin-top: 20px; font-size: 12px; color: #999999;">
                    <p>This email was generated by MailMate AI</p>
                </div>
            </body>
            </html>
            """
        
        return email_content

# ---- 🎨 Streamlit UI Styling ----
st.set_page_config(page_title="MailMate - AI Email Generator", page_icon="📩", layout="centered")

# Custom CSS for Better Email Styling - UPDATED STYLING
st.markdown("""
    <style>
        /* Base styling with better spacing */
        .block-container {
            padding-top: 2rem;
            padding-bottom: 2rem;
            max-width: 1000px;
        }
        
        /* Section styling (replacing cards) */
        .section {
            background-color: #f8f9fa;
            border-radius: 12px;
            padding: 24px;
            margin-bottom: 24px;
            border: 1px solid #e9ecef;
        }
        
        .section-title {
            font-size: 18px;
            font-weight: bold;
            margin-bottom: 20px;
            color: white;
            border-bottom: 1px solid #e9ecef;
            padding-bottom: 10px;
        }
        /* Remove resize handle from text area */
.stTextArea>div>div>textarea {
  resize: none !important;
}

/* Remove any default browser autofill UI */
.stTextInput>div>div>input::-webkit-autofill,
.stTextInput>div>div>input::-webkit-autofill:hover,
.stTextInput>div>div>input::-webkit-autofill:focus,
.stTextInput>div>div>input::-webkit-autofill:active {
  background-color: transparent !important;
  color: inherit !important;
  box-shadow: none !important;
  border: none !important;
  -webkit-text-fill-color: inherit !important;
  transition: background-color 5000s ease-in-out 0s !important;
}

/* Remove any extra UI elements like password reveal, autofill icons, etc. */
.stTextInput>div>div>input::-ms-reveal,
.stTextInput>div>div>input::-ms-clear,
.stTextInput>div>div>input::-webkit-contacts-auto-fill-button,
.stTextInput>div>div>input::-webkit-credentials-auto-fill-button {
  display: none !important;
  visibility: hidden !important;
  pointer-events: none !important;
}

/* Completely hide any hidden pseudo-elements causing the bubble */
.stTextInput>div:after,
.stTextInput>div>div:after {
  content: none !important;
  display: none !important;
}

/* Ensure uniform styling for all elements */

.stSelectbox>div>div, .stMultiSelect>div>div {
  
  border-radius: 10px;
  border: 1px solid white !important;
  box-shadow: none !important;
  outline: none !important;
  transition: border-color 0.3s ease;
  background-color: transparent !important;
}

/* Remove any default Streamlit box shadow */
.stTextInput>div>div, .stTextArea>div>div {
  border: none !important;
  background-color: transparent !important;
  box-shadow: none !important;
}

/* Target ALL states including hover, focus, active */
.stTextInput>div:hover, .stTextArea>div:hover, 
.stTextInput>div:focus-within, .stTextArea>div:focus-within, 
.stSelectbox>div>div:hover, .stMultiSelect>div>div:hover,
.stSelectbox>div>div:focus-within, .stMultiSelect>div>div:focus-within {
  border: 1px solid #4a90e2 !important;
  box-shadow: none !important;
  outline: none !important;
}

/* Override Streamlit's default styling */
.stTextInput div[data-baseweb="input"], .stTextArea div[data-baseweb="textarea"], 
.stSelectbox div[data-baseweb="select"], .stMultiSelect div[data-baseweb="select"] {
  border-color: white !important;
  box-shadow: none !important;
}

.stTextInput div[data-baseweb="input"]:focus-within, .stTextArea div[data-baseweb="textarea"]:focus-within, 
.stSelectbox div[data-baseweb="select"]:focus-within, .stMultiSelect div[data-baseweb="select"]:focus-within {
  border-color: #4a90e2 !important;
  box-shadow: none !important;
}
   
        /* Button styling with adjusted margins */
        .stButton>button {
            background: linear-gradient(90deg, #2575fc, #6a11cb);
            color: white;
            font-weight: 600;
            border-radius: 8px;
            padding: 12px 20px;
            border: none;
            transition: all 0.3s ease-in-out;
            margin: 10px 0;
            width: 100%;
        }
        .stButton>button:hover {
            background: linear-gradient(90deg,#6a11cb, #2575fc);
            color:white !important;
            transform: scale(1.02);
        }
        
        /* Email preview with adjusted padding */
        .email-preview {
            background: #ffffff;
            padding: 25px;
            border-radius: 8px;
            box-shadow: 0px 2px 6px rgba(0, 0, 0, 0.1);
            font-family: 'Arial', sans-serif;
            line-height: 1.5;
            border: 1px solid #ddd;
            color: #333;
            max-height: 500px;
            overflow-y: auto;
            margin: 15px 0;
        }
        
        /* Tabs styling with improved spacing */
        .tab-content {
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 0 0 8px 8px;
            margin: 0;
        }
        
        /* Footer */
        .footer {
            text-align: center;
            margin-top: 30px;
            font-size: 14px;
            color: #807e7e;
            padding: 15px 0 25px 0;
        }
        .footer a {
            color: #2575fc;
            text-decoration: none;
            font-weight: bold;
        }
        .footer a:hover {
            text-decoration: underline;
        }
        
        /* Tabs specific styling */
        .stTabs [data-baseweb="tab-list"] {
            gap: 0px;
        }
        .stTabs [data-baseweb="tab"] {
            height: 50px;
            white-space: pre-wrap;
            background-color: #f0f2f6;
            border-radius: 8px 8px 0 0;
            border: 1px solid #ddd;
            border-bottom: none;
            padding: 15px;
        }
        .stTabs [aria-selected="true"] {
            background-color: white;
            border-bottom: 1px solid white;
        }
        
        /* Header styling */
        .main-header {
            background: linear-gradient(90deg, #6a11cb, #2575fc);
            padding: 20px 25px;
            border-radius: 12px;
            color: white;
            margin-bottom: 30px;
            box-shadow: 0 4px 10px rgba(0,0,0,0.1);
        }
        .header-title {
            font-size: 28px;
            font-weight: bold;
            margin: 0;
        }
        .header-subtitle {
            font-size: 16px;
            opacity: 0.9;
            margin-top: 8px;
        }
        
        /* Labels with better spacing */
        label {
            font-weight: 500;
            margin-bottom: 8px;
            display: block;
        }
        
        /* Fix for white space */
        div[data-testid="stVerticalBlock"] {
            gap: 15px !important;
        }
        
        /* Sidebar improvements */
        .css-6qob1r {
            padding: 2rem 1rem;
        }
        
        /* Expander styling */
        .streamlit-expanderHeader {
            font-weight: 500;
            color: #2575fc;
        }
        
        /* Selectbox styling */
        .stSelectbox {
            margin-bottom: 10px;
        }
        div[role="tablist"] button {
            font-size: 18px !important;
            font-weight: bold !important;
            background-color: #f0f0f0 !important;
            color: #333 !important;
            padding: 10px !important;
            margin-right: 5px !important;
        }
    </style>
""", unsafe_allow_html=True)

# ---- 🚀 Sidebar Navigation ----
with st.sidebar:
    st.title("⚙️ Settings")
    page = st.radio("Navigate to:", ["📧 Email Settings", "📩 Email Generator"])

# Initialize session state if not already set
if "email_config" not in st.session_state:
    st.session_state.email_config = {"email": "", "password": ""}
if "generated_email" not in st.session_state:
    st.session_state.generated_email = ""
if "html_edit_mode" not in st.session_state:
    st.session_state.html_edit_mode = False

# ---- 📧 Email Settings Page ----
if page == "📧 Email Settings":
    st.markdown('<div class="main-header"><h1 class="header-title">📧 Email Configuration</h1><p class="header-subtitle">Set up your email credentials to send emails directly</p></div>', unsafe_allow_html=True)
    
    st.markdown('<div class="section-title">Gmail Account Details</div>', unsafe_allow_html=True)
    
    user_email = st.text_input("📧 Your Gmail Address:", value=st.session_state.email_config["email"], placeholder="e.g., your-email@gmail.com")
    app_password = st.text_input("🔑 App Password:", value=st.session_state.email_config["password"], type="password", placeholder="Generated App Password: sncc qwfd tbxo lxol")

    with st.expander("ℹ️ How to get App Password"):
        st.markdown("""
        1. Go to your Google Account > Security
        2. Enable 2-Step Verification
        3. Go to 'App passwords'
        4. Select 'Mail' and your device
        5. Copy the generated password
        for more detailed steps: view https://youtu.be/MkLX85XU5rU?si=P0T1N-Bdd2Pc0m1p
        """)

    if st.button("💾 Save Email Settings"):
        st.session_state.email_config = {"email": user_email, "password": app_password}
        st.success("✅ Email settings saved successfully!")

# ---- 📩 Email Generator Page ----
elif page == "📩 Email Generator":
    st.markdown('<div class="main-header"><h1 class="header-title">📩 MailMate AI</h1><p class="header-subtitle">AI-powered emails that sound like you - professional, personal yet simple!!!🚀</p></div>', unsafe_allow_html=True)
    
    # Email composition area with section title
    st.markdown('<div class="section-title">📝 Compose Your Email</div>', unsafe_allow_html=True)

    # Create columns for input fields
    col1, col2 = st.columns(2)
    
    with col1:
        recipient_name = st.text_input("👤 Recipient Name:")
        event_name = st.text_input("🎉 Event Name/Subject:")
    
    with col2:
        recipient_email = st.text_input("📧 Recipient Email:", placeholder="e.g., recipient@example.com")
        email_type = st.selectbox("✉️ Email Type:", ["Formal", "Friendly", "Apologetic", "Sales Pitch", "Thank You"])

    special_instructions = st.text_area("📝 Special Instructions (optional):", placeholder="e.g., Keep it concise, add a call-to-action, mention a discount...")
    
    # HTML Checkbox with better explanation
    use_html_format = st.checkbox("📜 Create Beautiful HTML Email (recommended for better visuals and formatting)")
    
    # Generate Email Button - With better styling
    st.markdown('<div style="padding: 10px 0 20px 0"></div>', unsafe_allow_html=True)
    if st.button("✨ Generate Email"):
        if recipient_name and event_name:
            with st.spinner("Crafting your email with AI magic..."):
                agent = EmailGenerator("MailMate AI")
                email_body = agent.generate_email(recipient_name, event_name, email_type, special_instructions, use_html_format)
                st.session_state.generated_email = email_body
                st.success("✅ Email generated successfully!")
        else:
            st.error("⚠️ Please fill in the Recipient Name and Event Name fields.")

    # Display Email Preview if generated
    if st.session_state.generated_email:
        st.markdown('<div class="section-title">📄 Your AI-Generated Email</div>', unsafe_allow_html=True)
        
        # Create tabs for preview and edit
        tab1, tab2 = st.tabs(["📋 Preview", "✏️ Edit"])
        
        with tab1:
            if use_html_format:
                # Display the HTML content properly rendered
                st.components.v1.html(st.session_state.generated_email, height=400, scrolling=True)
            else:
                # For plain text, use a styled div but avoid showing HTML tags
                formatted_email = st.session_state.generated_email.replace('\n', '<br>')
                st.markdown(f"<div class='email-preview'>{formatted_email}</div>", unsafe_allow_html=True)
        
        with tab2:
            # Edit mode
            email_content = st.text_area("Edit Your Email:", value=st.session_state.generated_email, height=300)
            if st.button("💾 Save Changes"):
                st.session_state.generated_email = email_content
                st.success("✅ Changes saved!")

        # Send Email Section
        # st.markdown('<div class="section-title">📤 Send Your Email</div>', unsafe_allow_html=True)
        
        # Send Email Button
        if st.button("📤 Send Email Now"):
            if recipient_email:
                sender_email = st.session_state.email_config.get("email")
                sender_password = st.session_state.email_config.get("password")

                if sender_email and sender_password:
                    try:
                        smtp_server = "smtp.gmail.com"
                        smtp_port = 465

                        msg = MIMEText(st.session_state.generated_email, "html" if use_html_format else "plain")
                        msg["From"] = sender_email
                        msg["To"] = recipient_email
                        msg["Subject"] = f"Regarding {event_name}"

                        with smtplib.SMTP_SSL(smtp_server, smtp_port) as server:
                            server.login(sender_email, sender_password)
                            server.sendmail(sender_email, recipient_email, msg.as_string())

                        st.success("✅ Email sent successfully!")

                    except Exception as e:
                        st.error(f"❌ Failed to send email: {str(e)}")
                else:
                    st.warning("⚠️ Please configure your email settings in the 'Email Settings' tab first.")
                    if st.button("Go to Email Settings"):
                        page = "📧 Email Settings"
            else:
                st.error("⚠️ Please enter the recipient's email.")

# ---- 🎉 Footer ----
st.markdown("""
    <div class="footer">
        Made with ❤️ by team <a href="https://github.com/suraj719/MailMate" target="_blank">status200</a>
    </div>
""", unsafe_allow_html=True)